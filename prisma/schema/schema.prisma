// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int               @id @default(autoincrement())
  code            String            @unique @db.VarChar(10)
  name            String            @db.VarChar(50)
  Nkp             Nkp[]
  ApprovalSetting ApprovalSetting[]
  Opportunity     Opportunity[]
  Lead            Lead[]

  @@map("Companies")
}

model Department {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(10)
  name String @db.VarChar(50)
  User User[]

  @@map("Departments")
}

model Bank {
  id       Int        @id @default(autoincrement())
  code     String     @unique @db.VarChar(10)
  name     String     @db.VarChar(50)
  User     User[]
  Nkp      Nkp[]
  Supplier Supplier[]

  @@map("Banks")
}

model User {
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(50)
  code               String?      @db.Char(4)
  email              String       @unique @db.VarChar(50)
  password           String       @db.VarChar(100)
  roles              Role[]       @default([USER])
  active             Boolean      @default(true)
  Balance            UserBalance?
  Bank               Bank?        @relation(fields: [bankId], references: [id])
  bankId             Int?
  bankAccount        String?      @db.VarChar(30)
  currency           Currency     @default(IDR)
  Department         Department?  @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  signatureSpeciment Json?        @db.JsonB

  Notification        Notification[]
  NkpApproval         NkpApproval[]
  ApprovalSettingItem ApprovalSettingItem[]
  Nkp                 Nkp[]                 @relation(name: "Nkp")
  NkpRequest          Nkp[]                 @relation(name: "NkpRequest")
  Transaction         Transaction[]
  Task                Task[]
  Interaction         Interaction[]
  CustomerNote        CustomerNote[]
  Lead                Lead[]
  Opportunity         Opportunity[]

  @@index([bankId, departmentId])
  @@map("Users")
}

model UserBalance {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int       @unique
  balance     Int       @default(0) @db.Integer
  description String?   @db.VarChar()
  updatedAt   DateTime? @updatedAt // kirim notifikasi apabila ada balance > 0 belum dilaporkan >= 7 hari

  @@index([userId])
  @@map("UserBalances")
}

model ApprovalSetting {
  id                  Int                   @id @default(autoincrement())
  Company             Company               @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId           Int
  approvalType        ApprovalType
  paymentType         PaymentType?
  nkpType             NkpType?
  ApprovalSettingItem ApprovalSettingItem[]

  @@unique([companyId, approvalType, paymentType, nkpType]) // ga boleh ada setting yg sama
  @@index([companyId])
  @@map("ApprovalSettings")
}

model ApprovalSettingItem {
  id                 Int                @id @default(autoincrement())
  ApprovalSetting    ApprovalSetting    @relation(fields: [approvalSettingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  approvalSettingId  Int
  level              Int                @db.SmallInt
  User               User               @relation(fields: [userId], references: [id])
  userId             Int
  approvalActionType ApprovalActionType @default(APPROVAL)

  @@unique([approvalSettingId, level, userId]) // ga boleh ada setting yg sama
  @@index([approvalSettingId, userId])
  @@map("ApprovalSettingItems")
}

// kirim juga notifikasi ini ke email dengan redaksi yang sama
model Notification {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  title       String    @db.VarChar(255)
  message     String    @db.Text
  redirectUrl String?   @db.VarChar(255)
  readAt      DateTime? @db.Timestamp()

  @@index([userId])
  @@map("Notifications")
}

enum Role {
  USER
  CASHIER
  FINANCE
  ACCOUNTING
  ADMIN
}

enum PaymentStatus {
  DRAFT
  SUBMITTED
  PARTIALLY_APPROVED
  FULLY_APPROVED
  REJECTED
  VERIFIED
  AUTHORIZED
  PAID
  CLOSED
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}

enum ApprovalType {
  NKP
}

enum ApprovalActionType {
  APPROVAL
  VERIFICATION
  AUTHORIZATION
}

enum PaymentType {
  EMPLOYEE
  VENDOR
  TRANSFER_BALANCE
  TAX
  BILL
}

enum NkpType {
  CASH_ADVANCE
  DECLARATION
  SALARY
  DOWN_PAYMENT
  SETTLEMENT
  TRANSFER_BALANCE
  TAX
  BPJS
  UTILITY
}
