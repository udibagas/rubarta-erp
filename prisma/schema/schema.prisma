// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                   Int                    @id @default(autoincrement())
  code                 String                 @unique @db.VarChar(10)
  name                 String                 @db.VarChar(50)
  PaymentAuthorization PaymentAuthorization[]
  ExpenseClaim         ExpenseClaim[]
  ApprovalSetting      ApprovalSetting[]

  @@map("Companies")
}

model Department {
  id           Int            @id @default(autoincrement())
  code         String         @unique @db.VarChar(10)
  name         String         @db.VarChar(50)
  User         User[]
  ExpenseClaim ExpenseClaim[]

  @@map("Departments")
}

model Bank {
  id                   Int                    @id @default(autoincrement())
  code                 String                 @unique @db.VarChar(10)
  name                 String                 @db.VarChar(50)
  User                 User[]
  PaymentAuthorization PaymentAuthorization[]
  Supplier             Supplier[]

  @@map("Banks")
}

model User {
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(50)
  code               String?      @db.Char(4)
  email              String       @unique @db.VarChar(50)
  password           String       @db.VarChar(100)
  roles              Role[]       @default([USER])
  active             Boolean      @default(true)
  Balance            UserBalance?
  Bank               Bank?        @relation(fields: [bankId], references: [id])
  bankId             Int?
  bankAccount        String?      @db.VarChar(30)
  currency           Currency     @default(IDR)
  Department         Department?  @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  signatureSpeciment Json?        @db.JsonB

  Notification                 Notification[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]
  ExpenseClaim                 ExpenseClaim[]
  ExpenseClaimApproval         ExpenseClaimApproval[]
  ApprovalSettingItem          ApprovalSettingItem[]
  PaymentAuthorization         PaymentAuthorization[]         @relation(name: "PaymentAuthorization")
  PaymentAuthorizationRequest  PaymentAuthorization[]         @relation(name: "PaymentAuthorizationRequest")
  PaymentAuthorizationLog      PaymentAuthorizationLog[]
  ExpenseNote                  ExpenseNote[]
  Transaction                  Transaction[]

  @@index([bankId, departmentId])
  @@map("Users")
}

model UserBalance {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int       @unique
  balance   Int       @default(0) @db.Integer
  updatedAt DateTime? @updatedAt // kirim notifikasi apabila ada balance > 0 belum dilaporkan >= 7 hari

  @@index([userId])
  @@map("UserBalances")
}

model PaymentAuthorization {
  id             Int           @id @default(autoincrement())
  date           DateTime      @default(now()) @db.Date
  number         String?       @db.VarChar(50) // generated by system
  Employee       User?         @relation(fields: [employeeId], references: [id], name: "PaymentAuthorization")
  employeeId     Int?
  Supplier       Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId     Int?
  Requester      User          @relation(fields: [requesterId], references: [id], name: "PaymentAuthorizationRequest")
  requesterId    Int
  description    String        @db.Text
  ExpenseClaim   ExpenseClaim? @relation(fields: [expenseClaimId], references: [id])
  expenseClaimId Int?          @unique
  status         PaymentStatus @default(DRAFT)
  paymentType    PaymentType   @default(EMPLOYEE)

  // bank related
  Bank        Bank     @relation(fields: [bankId], references: [id])
  bankId      Int
  bankAccount String   @db.VarChar(30)
  currency    Currency @default(IDR)
  bankRefNo   String?  @db.VarChar(30)

  // amount related
  grandTotal   Int  @db.Integer
  deduction    Int  @default(0) @db.Integer
  tax          Int  @default(0) @db.Integer
  downPayment  Int  @default(0) @db.Integer
  cashAdvance  Int  @default(0) @db.Integer
  netAmount    Int  @db.Integer
  finalPayment Int? @db.Integer

  // timestamp
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  approvedAt DateTime?
  verifiedAt DateTime?
  paidAt     DateTime?

  PaymentAuthorizationItem     PaymentAuthorizationItem[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]
  Company                      Company                        @relation(fields: [companyId], references: [id])
  companyId                    Int
  PaymentAuthorizationLog      PaymentAuthorizationLog[]

  @@index([employeeId, requesterId, bankId, expenseClaimId, companyId])
  @@map("PaymentAuthorizations")
}

model PaymentAuthorizationItem {
  id                     Int                   @id @default(autoincrement())
  date                   DateTime              @db.Date
  description            String                @db.Text
  amount                 Int                   @db.Integer
  currency               Currency              @default(IDR)
  PaymentAuthorization   PaymentAuthorization? @relation(fields: [paymentAuthorizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentAuthorizationId Int

  @@index([paymentAuthorizationId])
  @@map("PaymentAuthorizationItems")
}

model PaymentAuthorizationApproval {
  id                     Int                  @id @default(autoincrement())
  User                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
  approvalActionType     ApprovalActionType
  level                  Int                  @db.SmallInt
  PaymentAuthorization   PaymentAuthorization @relation(fields: [paymentAuthorizationId], references: [id])
  approvalStatus         ApprovalStatus? // kirim notifikasi per hari jika status null
  note                   String?              @db.VarChar(255)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
  paymentAuthorizationId Int

  @@unique([userId, paymentAuthorizationId])
  @@index([userId, paymentAuthorizationId])
  @@map("PaymentAuthorizationApprovals")
}

model PaymentAuthorizationLog {
  id                     Int                  @id @default(autoincrement())
  User                   User                 @relation(fields: [userId], references: [id])
  PaymentAuthorization   PaymentAuthorization @relation(fields: [paymentAuthorizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status                 PaymentStatus
  note                   String?              @db.VarChar(100)
  updatedAt              DateTime?            @default(now())
  userId                 Int
  paymentAuthorizationId Int

  @@index([userId, paymentAuthorizationId])
  @@map("PaymentAuthorizationLogs")
}

model ExpenseType {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(30) // toll charge, fuel, food, parking
  ExpenseClaimItem ExpenseClaimItem[]
  ExpenseNote      ExpenseNote[]

  @@map("ExpenseTypes")
}

model ExpenseClaim {
  id                     Int                      @id @default(autoincrement())
  number                 String?                  @db.VarChar(50)
  date                   DateTime?                @default(now()) @db.Date
  User                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  Department             Department               @relation(fields: [departmentId], references: [id])
  departmentId           Int
  totalAmount            Int                      @db.Integer
  cashAdvance            Int                      @db.Integer
  claim                  Int                      @db.Integer // if < 0 = refund
  status                 ClaimStatus              @default(DRAFT)
  ExpenseClaimAttachment ExpenseClaimAttachment[]
  ExpenseClaimApproval   ExpenseClaimApproval[]
  Company                Company                  @relation(fields: [companyId], references: [id])
  companyId              Int
  ExpenseClaimItem       ExpenseClaimItem[]
  PaymentAuthorization   PaymentAuthorization?
  updatedAt              DateTime                 @default(now()) @updatedAt

  @@index([userId, departmentId, companyId])
  @@map("ExpenseClaims")
}

model ExpenseClaimItem {
  id             Int          @id @default(autoincrement())
  ExpenseClaim   ExpenseClaim @relation(fields: [expenseClaimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date           DateTime     @db.Date
  ExpenseType    ExpenseType  @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId  Int
  description    String       @db.Text
  amount         Int          @db.Integer
  expenseClaimId Int

  @@index([expenseTypeId, expenseClaimId])
  @@map("ExpenseClaimItems")
}

model ExpenseClaimAttachment {
  id             Int          @id @default(autoincrement())
  ExpenseClaim   ExpenseClaim @relation(fields: [expenseClaimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenseClaimId Int
  description    String?      @db.VarChar(255)

  fileName String @db.VarChar(255)
  filePath String @db.Text
  fileSize Int    @db.Integer
  fileType String @db.VarChar(30)

  @@index([expenseClaimId])
  @@map("ExpenseClaimAttachments")
}

model ExpenseClaimApproval {
  id                 Int                @id @default(autoincrement())
  ExpenseClaim       ExpenseClaim       @relation(fields: [expenseClaimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenseClaimId     Int
  User               User               @relation(fields: [userId], references: [id])
  userId             Int
  approvalActionType ApprovalActionType
  level              Int
  approvalStatus     ApprovalStatus? // kirim notifikasi per hari jika status null
  note               String?            @db.VarChar(255)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?          @updatedAt

  @@unique([expenseClaimId, userId])
  @@index([expenseClaimId, userId])
  @@map("ExpenseClaimApprovals")
}

model ApprovalSetting {
  id                  Int                   @id @default(autoincrement())
  Company             Company               @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId           Int
  approvalType        ApprovalType
  ApprovalSettingItem ApprovalSettingItem[]

  @@unique([companyId, approvalType]) // ga boleh ada setting yg sama
  @@index([companyId])
  @@map("ApprovalSettings")
}

model ApprovalSettingItem {
  id                 Int                @id @default(autoincrement())
  ApprovalSetting    ApprovalSetting    @relation(fields: [approvalSettingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  approvalSettingId  Int
  level              Int                @db.SmallInt
  User               User               @relation(fields: [userId], references: [id])
  userId             Int
  approvalActionType ApprovalActionType @default(APPROVAL)

  @@unique([approvalSettingId, level, userId]) // ga boleh ada setting yg sama
  @@index([approvalSettingId, userId])
  @@map("ApprovalSettingItems")
}

// kirim juga notifikasi ini ke email dengan redaksi yang sama
model Notification {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  title       String    @db.VarChar(255)
  message     String    @db.Text
  redirectUrl String?   @db.VarChar(255)
  readAt      DateTime? @db.Timestamp()

  @@index([userId])
  @@map("Notifications")
}

// untuk di convert ke expense claim
model ExpenseNote {
  id            Int         @id @default(autoincrement())
  User          User        @relation(fields: [userId], references: [id])
  userId        Int
  date          DateTime    @db.Date
  ExpenseType   ExpenseType @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId Int
  description   String      @db.Text
  amount        Int         @db.Integer
  attachment    Json?       @db.JsonB

  @@map("ExpenseNotes")
}

enum Role {
  USER
  CASHIER
  FINANCE
  ACCOUNTING
  GA
  APPROVER
  VERIFIER
  AUTHORIZER
  ADMIN
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  PARTIALLY_APPROVED
  FULLY_APPROVED
  IN_PROCESS
  REJECTED
  VERIFIED
  CANCELLED
  PAID
}

enum PaymentStatus {
  DRAFT
  SUBMITTED
  PARTIALLY_APPROVED
  FULLY_APPROVED
  REJECTED
  VERIFIED
  AUTHORIZED
  PAID
  CLOSED
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}

enum ApprovalType {
  PAYMENT_AUTHORIZATION
  EXPENSE_CLAIM
}

enum ApprovalActionType {
  APPROVAL
  VERIFICATION
  AUTHORIZATION
}

enum PaymentType {
  EMPLOYEE
  VENDOR
}
