// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  PaymentAuthorization PaymentAuthorization[]
  ExpenseClaim         ExpenseClaim[]
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  User         User[]
  ExpenseClaim ExpenseClaim[]

  @@map("Departments")
}

model Bank {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  code                 String                 @db.VarChar(10)
  User                 User[]
  PaymentAuthorization PaymentAuthorization[]

  @@map("Banks")
}

model User {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(50)
  email                        String                         @db.VarChar(50)
  password                     String                         @db.VarChar(100)
  role                         Role                           @default(USER)
  active                       Boolean                        @default(true)
  Balance                      UserBalance?
  Bank                         Bank?                          @relation(fields: [bankId], references: [id])
  bankId                       Int?
  Department                   Department                     @relation(fields: [departmentId], references: [id])
  departmentId                 Int
  PaymentAuthorization         PaymentAuthorization[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]
  ExpenseClaim                 ExpenseClaim[]
  ExpenseClaimApproval         ExpenseClaimApproval[]

  @@map("Users")
}

model UserBalance {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  balance   BigInt   @default(0) @db.BigInt
  updatedAt DateTime @db.Timestamp()

  @@map("UserBalances")
}

model PaymentAuthorization {
  id                           Int                            @id @default(autoincrement())
  date                         DateTime                       @db.Date
  number                       String                         @db.VarChar(50)
  User                         User                           @relation(fields: [userId], references: [id])
  userId                       Int
  Bank                         Bank                           @relation(fields: [bankId], references: [id])
  bankId                       Int
  grossAmount                  BigInt                         @db.BigInt
  deduction                    BigInt                         @db.BigInt
  netAmount                    BigInt                         @db.BigInt // yg harus ditransfer/dikembalikan, if < 0, dikembalikan ke perusahaan
  amount                       BigInt                         @db.BigInt // real amount
  cashAdvance                  BigInt                         @default(0) @db.BigInt
  description                  String                         @db.Text
  status                       PaymentStatus                  @default(DRAFT)
  createdAt                    DateTime                       @db.Timestamp() // todo kasih default
  updatedAt                    DateTime                       @db.Timestamp()
  PaymentAuthorizationItem     PaymentAuthorizationItem[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]
  Company                      Company                        @relation(fields: [companyId], references: [id])
  companyId                    Int

  @@map("PaymentAuthorizations")
}

model PaymentAuthorizationItem {
  id                     Int                   @id @default(autoincrement())
  date                   DateTime              @db.Date
  description            String                @db.Text
  amount                 BigInt                @db.BigInt
  PaymentAuthorization   PaymentAuthorization? @relation(fields: [paymentAuthorizationId], references: [id])
  paymentAuthorizationId Int

  @@map("PaymentAuthorizationItems")
}

model PaymentAuthorizationApproval {
  id                     Int                  @id @default(autoincrement())
  User                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
  PaymentAuthorization   PaymentAuthorization @relation(fields: [paymentAuthorizationId], references: [id])
  approvalStatus         ApprovalStatus?
  updatedAt              DateTime?            @db.Timestamp()
  paymentAuthorizationId Int
}

model ExpenseType {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(30) // toll charge, fuel, food, parking
  ExpenseClaimItem ExpenseClaimItem[]
}

model ExpenseClaim {
  id                     Int                      @id @default(autoincrement())
  date                   DateTime                 @db.Date
  User                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  Department             Department               @relation(fields: [departmentId], references: [id])
  departmentId           Int
  amount                 BigInt                   @db.BigInt
  cashAdvance            BigInt                   @db.BigInt
  claim                  BigInt                   @db.BigInt // if < 0 = refund
  status                 ClaimStatus              @default(DRAFT)
  ExpenseClaimAttachment ExpenseClaimAttachment[]
  ExpenseClaimApproval   ExpenseClaimApproval[]
  Company                Company                  @relation(fields: [companyId], references: [id])
  companyId              Int
}

model ExpenseClaimItem {
  id            Int         @id @default(autoincrement())
  date          DateTime    @db.Date
  ExpenseType   ExpenseType @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId Int
  description   String      @db.Text
  amount        BigInt      @db.BigInt
}

model ExpenseClaimAttachment {
  id             Int          @id @default(autoincrement())
  ExpenseClaim   ExpenseClaim @relation(fields: [expenseClaimId], references: [id])
  expenseClaimId Int
  fileName       String       @db.VarChar(255)
  filePath       String       @db.Text
  fileSize       BigInt       @db.BigInt
  description    String?      @db.VarChar(255)
}

model ExpenseClaimApproval {
  id             Int             @id @default(autoincrement())
  ExpenseClaim   ExpenseClaim    @relation(fields: [expenseClaimId], references: [id])
  expenseClaimId Int
  User           User            @relation(fields: [userId], references: [id])
  userId         Int
  approvalStatus ApprovalStatus?
  updatedAt      DateTime        @db.Timestamp()
}

enum Role {
  USER
  CASHIER
  FINANCE
  ACCOUNTING
  ADMIN
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PARTIIALLY_APPROVED
  REJECTED
  VERIFIED
  CANCELLED
  PAID
}

enum PaymentStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PARTIIALLY_APPROVED
  REJECTED
  VERIFIED
  PAID
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}
