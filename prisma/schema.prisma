// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
  User User[]

  @@map("Departments")
}

model Bank {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  code                 String                 @db.VarChar(10)
  User                 User[]
  PaymentAuthorization PaymentAuthorization[]

  @@map("Banks")
}

model User {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(50)
  email                        String                         @db.VarChar(50)
  password                     String                         @db.VarChar(100)
  role                         Role                           @default(USER)
  active                       Boolean                        @default(true)
  Balance                      UserBalance?
  Bank                         Bank?                          @relation(fields: [bankId], references: [id])
  bankId                       Int?
  department                   Department                     @relation(fields: [departmentId], references: [id])
  departmentId                 Int
  PaymentAuthorization         PaymentAuthorization[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]

  @@map("Users")
}

model UserBalance {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  balance   BigInt   @default(0) @db.BigInt()
  updatedAt DateTime @db.Timestamp()

  @@map("UserBalances")
}

model PaymentAuthorization {
  id                           Int                            @id @default(autoincrement())
  Requester                    User                           @relation(fields: [requesterId], references: [id])
  requesterId                  Int
  Bank                         Bank                           @relation(fields: [bankId], references: [id])
  bankId                       Int
  grossAmount                  BigInt                         @db.BigInt()
  deduction                    BigInt                         @db.BigInt()
  netAmount                    BigInt                         @db.BigInt()
  description                  String                         @db.Text()
  status                       ClaimStatus                    @default(DRAFT)
  createdAt                    DateTime                       @db.Timestamp() // todo kasih default
  updatedAt                    DateTime                       @db.Timestamp()
  PaymentAuthorizationItem     PaymentAuthorizationItem[]
  PaymentAuthorizationApproval PaymentAuthorizationApproval[]

  @@map("PaymentAuthorizations")
}

model PaymentAuthorizationItem {
  id                     Int                   @id @default(autoincrement())
  date                   DateTime              @db.Date
  description            String                @db.Text()
  amount                 BigInt                @db.BigInt
  PaymentAuthorization   PaymentAuthorization? @relation(fields: [paymentAuthorizationId], references: [id])
  paymentAuthorizationId Int

  @@map("PaymentAuthorizationItems")
}

model PaymentAuthorizationApproval {
  id                     Int                  @id @default(autoincrement())
  User                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
  PaymentAuthorization   PaymentAuthorization @relation(fields: [paymentAuthorizationId], references: [id])
  approvalStatus         ApprovalStatus?
  updatedAt              DateTime?            @db.DateTime()
  paymentAuthorizationId Int
}

enum Role {
  USER
  CASHIER
  FINANCE
  ACCOUNTING
  ADMIN
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PARTIIALLY_APPROVED
  REJECTED
  VERIFIED
  PAID
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}
